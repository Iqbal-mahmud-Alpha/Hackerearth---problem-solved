#include <bits/stdc++.h>
using namespace std;
#define faster            ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ff                first
#define ss                second
#define pb                push_back
#define pr                pair<int,int>
#define mem(a,b)          memset(a,b,sizeof(a))
#define gcd(a, b)         __gcd(a, b)
#define lcm(a, b)         (a * (b / gcd(a, b)))
#define all(a)            a.begin(), a.end()
#define setbit(n)         __builtin_popcount(n);
#define totalbit(n)       log2(n)+1
#define lens(s)           s.size()
#define lena(a)           sizeof(a)/sizeof(a[0])
#define posation(x)       cout<<fixed<<setprecision(x)
#define pi                3.141592653589793
#define INF               1000000000
#define mod               1000000007 //10^9+7;
#define num               100006

/**----data type----*/
typedef long long int ll;
typedef unsigned long long int llu;

/**---Graph_move---*/
int dx[]= {-1, 0, 1,  0, -1, -1,  1, 1};
int dy[]= { 0, 1, 0, -1, -1,  1, -1, 1};
int kx[]= {-2,-1, 1, 2,  2,  1, -1, -2};
int ky[]= { 1, 2, 2, 1, -1, -2, -2, -1};

vector<int>v[num],tr[num];
int vis[num],ar[num];
stack<int>s;
vector<int>res;
void dfs(int node)
{
    vis[node]=1;
    for(int child:v[node])
    {
        if(vis[child]==0)
        {
            dfs(child);
        }
    }
    s.push(node);
}
void dfs2(int node)
{
    vis[node]=1;
    for(int child:tr[node])
    {
        if(vis[child]==0)
        {
            dfs2(child);
        }
    }
    res.pb(node);
}
int c[num];
int main()
{
    int tc,n,e,x,y;

    cin>>n>>e;
    for(int i=1; i<=e; i++)
    {
        cin>>x>>y;
        v[x].pb(y);
        tr[y].pb(x);
    }
    for(int i=1; i<=n; i++)
    {
        if(vis[i]==0)
        {
            dfs(i);
        }
    }
    mem(vis,0);
    while(!s.empty())
    {
        int curr=s.top();
        s.pop();
        if(vis[curr]==0)
        {
            res.clear();
            dfs2(curr);
            if(res.size()>1)
            {
                for(int i:res)
                {
                    c[i]=1;
                }
            }
        }
    }
    for(int i=1; i<=n; i++)
    {
        cout<<c[i]<<' ';
    }
}



